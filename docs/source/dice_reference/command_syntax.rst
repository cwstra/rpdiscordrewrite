.. RPDiscordRewrite documentation master file, created by
   sphinx-quickstart on Mon May 28 13:33:53 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

.. _command_syntax:

Command Syntax
============================================
--------------------------------------------

The command-based dice roller is designed to be easy to use, but powerful. The basic syntax of the parser is outlined below; the functions that compose most of the usefulness of the parser are listed under the :ref:`command_functions` section.

.. _constants:

Constants
============================================

The following sections cover various constant values: literals, rational numbers, and complex numbers.

.. _literals:
Literals
--------------------------------------------

A `literal` is a constant term in a dice expression. The dice parser supports three fundamental types of literal: integers, floats, and booleans.

* Integers are your typical 'whole numbers', along with their negatives; `1, 21, 0,` and `-5` are all integers.
* Floats are your typical floating point numbers, more commonly known as decimals. `0.0, 6.0, 3.5`, and `-19.32132132` are all floats.
* There are only two boolean values: `True` and `False`. They can be used in statements like `if` or `not`, or generated by comparison operators like `<=` or `!=`

.. _rational_numbers:

Rational Numbers
--------------------------------------------

The dice parser also supports rational numbers. If two integer values are divided with `/`, the result will be internally turned into a rational number, rather than a float. All basic arithemetic involving only rationals or integers will be carried out exactly, rather than using a floating-point approximation. While exact, this is a bit slower than floating-point arithemetic, so if a calculation involving division seems to be rather slow, consider turning one of the integers involved into a float, which should speed up the processing.

.. _complex_numbers:

Complex Numbers
--------------------------------------------

The dice parser can even work with imaginary and complex numbers. In keeping with python convention, the imaginary unit, writen as `i` in most mathematics, is instead represented with a `j`. The real and imaginary parts of complex numbers can be composed of reals, floats, or rationals, and, where possible, calculations are done exactly.

.. _grouping:

Grouping
============================================

The following sections cover the two grouping mechanisms: parentheses and brackets.

.. _parentheses::

Parentheses
--------------------------------------------

As-is typical, the dice parser uses parentheses `()` for grouping expresions. If a parenthetical expression contains no non-nested commas, the parentheses simply say to perform a given operation first, ignoring any normal order of operatons. However, if a parenthetical expression contains commas, the result will instead be a :ref:`vector`, whose elements are the parts of the expression that are separated by commas.

.. _brackets::

Brackets
--------------------------------------------

It may seem as though brackets should behave identically to parentheses. However, besides the standard grouping functionality of parentheses, brackets serve an additional, important role; any statement within brackets will be forced to evaluate fully to a number before being used in calculations outside of the brackets. This allows certain overloaded functions, such as `d` or `>=`, to safely be used on the results of dice, rather than the dice themselves.

.. _vectors:

Vectors
============================================

The term 'vector' is used rather loosely when it comes to the dice parser. Fundamentally, they are simply lists of values, which could potentially include other vectors. However, they also have some additional arithemetic operations available; one can, for example, add two vectors of numbers together in the natural way, or multiply a vector of numbers by a scalar.
